#the question was to predict that the market will increase by 50 points in the next 13 minutes

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, accuracy_score
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.optimizers import Adam

# Step 1: Load and preprocess the market data
# Assume df contains features relevant to market prediction and a column indicating whether the market increased by 50 points in 13 minutes
# Example DataFrame creation for demonstration
np.random.seed(42)
df = pd.DataFrame({
    'feature1': np.random.rand(1000),
    'feature2': np.random.rand(1000),
    'feature3': np.random.rand(1000),
    'price_change': np.random.rand(1000) * 100  # Example of price change data
})

# Creating the target: whether the market increased by 50 points in 13 minutes (binary classification)
# Example target definition; in practice, calculate based on actual market data.
df['target'] = (df['price_change'] >= 50).astype(int)

# Split into features and targets
X = df[['feature1', 'feature2', 'feature3']]  # Replace with your actual features
y = df['target']  # Binary target

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 2: Build a Binary Classification Neural Network Model
input_layer = Input(shape=(X_train_scaled.shape[1],))

# Neural network layers
x = Dense(64, activation='relu')(input_layer)
x = Dense(32, activation='relu')(x)

# Output layer: binary classification (0 or 1)
output = Dense(1, activation='sigmoid')(x)  # Sigmoid activation for binary classification

# Define the model
model = Model(inputs=input_layer, outputs=output)

